// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/shippingservice.proto

package hipstershop

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v5/api"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ShippingService service

func NewShippingServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShippingService service

type ShippingService interface {
	GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...client.CallOption) (*GetQuoteResponse, error)
	ShipOrder(ctx context.Context, in *ShipOrderRequest, opts ...client.CallOption) (*ShipOrderResponse, error)
}

type shippingService struct {
	c    client.Client
	name string
}

func NewShippingService(name string, c client.Client) ShippingService {
	return &shippingService{
		c:    c,
		name: name,
	}
}

func (c *shippingService) GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...client.CallOption) (*GetQuoteResponse, error) {
	req := c.c.NewRequest(c.name, "ShippingService.GetQuote", in)
	out := new(GetQuoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingService) ShipOrder(ctx context.Context, in *ShipOrderRequest, opts ...client.CallOption) (*ShipOrderResponse, error) {
	req := c.c.NewRequest(c.name, "ShippingService.ShipOrder", in)
	out := new(ShipOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShippingService service

type ShippingServiceHandler interface {
	GetQuote(context.Context, *GetQuoteRequest, *GetQuoteResponse) error
	ShipOrder(context.Context, *ShipOrderRequest, *ShipOrderResponse) error
}

func RegisterShippingServiceHandler(s server.Server, hdlr ShippingServiceHandler, opts ...server.HandlerOption) error {
	type shippingService interface {
		GetQuote(ctx context.Context, in *GetQuoteRequest, out *GetQuoteResponse) error
		ShipOrder(ctx context.Context, in *ShipOrderRequest, out *ShipOrderResponse) error
	}
	type ShippingService struct {
		shippingService
	}
	h := &shippingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShippingService{h}, opts...))
}

type shippingServiceHandler struct {
	ShippingServiceHandler
}

func (h *shippingServiceHandler) GetQuote(ctx context.Context, in *GetQuoteRequest, out *GetQuoteResponse) error {
	return h.ShippingServiceHandler.GetQuote(ctx, in, out)
}

func (h *shippingServiceHandler) ShipOrder(ctx context.Context, in *ShipOrderRequest, out *ShipOrderResponse) error {
	return h.ShippingServiceHandler.ShipOrder(ctx, in, out)
}
