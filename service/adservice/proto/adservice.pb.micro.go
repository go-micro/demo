// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/adservice.proto

package hipstershop

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v5/api"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AdService service

func NewAdServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AdService service

type AdService interface {
	GetAds(ctx context.Context, in *AdRequest, opts ...client.CallOption) (*AdResponse, error)
}

type adService struct {
	c    client.Client
	name string
}

func NewAdService(name string, c client.Client) AdService {
	return &adService{
		c:    c,
		name: name,
	}
}

func (c *adService) GetAds(ctx context.Context, in *AdRequest, opts ...client.CallOption) (*AdResponse, error) {
	req := c.c.NewRequest(c.name, "AdService.GetAds", in)
	out := new(AdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdService service

type AdServiceHandler interface {
	GetAds(context.Context, *AdRequest, *AdResponse) error
}

func RegisterAdServiceHandler(s server.Server, hdlr AdServiceHandler, opts ...server.HandlerOption) error {
	type adService interface {
		GetAds(ctx context.Context, in *AdRequest, out *AdResponse) error
	}
	type AdService struct {
		adService
	}
	h := &adServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AdService{h}, opts...))
}

type adServiceHandler struct {
	AdServiceHandler
}

func (h *adServiceHandler) GetAds(ctx context.Context, in *AdRequest, out *AdResponse) error {
	return h.AdServiceHandler.GetAds(ctx, in, out)
}
